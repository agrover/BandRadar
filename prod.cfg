[global]
# This is where all of your settings go for your production environment.
# You'll copy this file over to your production server and provide it
# as a command-line option to your start script.
# Settings that are the same for both development and production
# (such as template engine, encodings, etc.) all go in 
# bandradar/config/app.cfg

# DATABASE

sqlobject.dburi="postgres://bandradar:bandradar@localhost/bandradar"

# SERVER

server.socket_port=8081
server.socket_host="localhost"

server.environment="production"

# Sets the number of threads the server uses
# server.thread_pool = 1
server.thread_pool = 4

# if this is part of a larger site, you can set the path
# to the TurboGears instance here
# server.webpath=""

# session_filter.on = True

# Set to True if you'd like to abort execution if a controller gets an
# unexpected parameter. False by default
# tg.strict_parameters = False
tg.strict_parameters = True

# Set the following to True if you are deploying your app using mod_proxy,
# mod_rewrite or any other mechanism that forwards requests to your app.
# base_url_filter.on = False
# base_url_filter.use_x_forwarded_host = False
base_url_filter.on = True
base_url_filter.use_x_forwarded_host = True

# LOGGING
# Logging configuration generally follows the style of the standard
# Python logging module configuration. Note that when specifying
# log format messages, you need to use *() for formatting variables.
# Deployment independent log configuration is in bandradar/config/log.cfg
[logging]

[[handlers]]

[[[access_out]]]
# set the filename as the first argument below
args="('server.log',)"
class='FileHandler'
level='INFO'
formatter='message_only'

[[loggers]]
[[[bandradar]]]
level='ERROR'
qualname='bandradar'
handlers=['error_out']

[[[access]]]
level='INFO'
qualname='turbogears.access'
handlers=['access_out']
propagate=0
